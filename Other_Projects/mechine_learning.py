# -*- coding: utf-8 -*-
"""pratice for mechine learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x0pESzSe6CBsg6FC21lxC4_uadwo9HTF
"""

from pandas import read_csv,get_dummies,Series,DataFrame
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE

cancerdata=read_csv('/content/Breast_Cancer.csv')

cancerdata

cancerdata.info()

cancerdata.head()

cancerdata.tail()

cancerdata.describe()

cancerdata.isnull().sum()

cancerdata.columns

cancerdata.shape

cancerdata.info()

features=['Race','Marital Status','T Stage ','N Stage','6th Stage','differentiate','Grade','Regional Node Examined','Survival Months']
cancerdata2=get_dummies(cancerdata,columns=features)

cancerdata.columns

cancerdata['Age'].unique()

cancerdata['Race'].unique()

cancerdata['Marital Status'].unique()

cancerdata.iloc[:,3].unique()

cancerdata['N Stage'].unique()

cancerdata['6th Stage'].unique()

cancerdata['differentiate'].unique()

cancerdata['Grade'].unique()

cancerdata['A Stage'].unique()

cancerdata['A Stage']=cancerdata['A Stage'].map({'Regional':0,'Distant':1})

cancerdata['Tumor Size'].unique()

cancerdata['Estrogen Status'].unique()

cancerdata['Estrogen Status']=cancerdata['Estrogen Status'].map({'Positive':0,'Negative':1})

cancerdata['Progesterone Status'].unique()

cancerdata['Progesterone Status']=cancerdata['Progesterone Status'].map({'Positive':0,'Negative':1})

cancerdata['Regional Node Examined'].unique()

cancerdata['Reginol Node Positive'].unique()

cancerdata['Survival Months'].unique()

cancerdata['Status'].unique()

cancerdata['Status']=cancerdata['Status'].map({'Dead':0,'Alive':1})

features=['Age','Race','Marital Status','T Stage ','N Stage','6th Stage','differentiate','Grade','Tumor Size','Regional Node Examined','Reginol Node Positive','Survival Months']
cancerdata2=get_dummies(cancerdata,columns=features)

cancerdata2

cancerdata2.shape

cancerdata2.columns

cancerdata2.info()

cancerdata2.to_csv('cancerdata2_Prepared')

Y=cancerdata2['Status']

X=cancerdata2.drop('Status',axis=1)

X.shape

Y.shape

Y

X_scaled=StandardScaler().fit_transform(X)
DataFrame(X_scaled)

X_scaled

X_train,X_test,Y_train,Y_test=train_test_split(X_scaled,Y,test_size=0.3,random_state=1)

X_train

Y_train

X_test

Y_test

X_train.shape

X_test.shape

Y_train.value_counts()

smote=SMOTE(random_state=1)

X_train,Y_train=smote.fit_resample(X_train,Y_train)

Y_train.value_counts()

from sklearn.tree import DecisionTreeClassifier

d = DecisionTreeClassifier(random_state=100)

d.fit(X_train,Y_train)

Y_pred = d.predict(X_test)

from sklearn import metrics
accuracy = metrics.accuracy_score(Y_test, Y_pred)
print("Accuracy:", accuracy)
confusion_matrix = metrics.confusion_matrix(Y_test, Y_pred)
print("Confusion Matrix:\n", confusion_matrix)
precision = metrics.precision_score(Y_test, Y_pred)
recall = metrics.recall_score(Y_test, Y_pred)
print("Precision:", precision)
print("Recall:", recall)

from sklearn import tree

d=tree.DecisionTreeClassifier(criterion='entropy',max_depth=9)

d.fit(X_train,Y_train)

Y=d.predict(X_test)

from sklearn import metrics

A=metrics.accuracy_score(Y_test,Y)
R=metrics.recall_score(Y_test,Y)
P=metrics.precision_score(Y_test,Y)
print('Accuracy',A)
print('Recall',R)
print('Precision',P)

c=metrics.confusion_matrix(Y_test,Y)
c

from sklearn.model_selection import GridSearchCV
dec_tree2=tree.DecisionTreeClassifier(criterion='entropy')
depth={'max_depth':[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,30]}
grid=GridSearchCV(estimator=dec_tree2,param_grid=depth,scoring='precision',cv=5)
grid.fit(X_train,Y_train)
best_depth=grid.best_params_
print(best_depth)

dec_tree_best_depth_impt_feat=tree.DecisionTreeClassifier(criterion='entropy',max_depth=3)
dec_tree_best_depth_impt_feat.fit(X_train,Y_train)
Y_pred_impt_feat=dec_tree_best_depth_impt_feat.predict(X_test)
imp_features=Series(dec_tree_best_depth_impt_feat.feature_importances_,index=X.columns).sort_values(ascending=False)
print(imp_features)

# Getting the important features in the dataset
X2=cancerdata[['N Stage_N1','6th Stage_IIIA','T Stage _T4','T Stage _T3']]

# Normalization/ Standardisation of the new dataset with important features
X_scaled2=StandardScaler().fit_transform(X2)


# Dataset into training and testing
X_train,X_test,Y_train,Y_test= train_test_split(X_scaled2,Y, test_size=0.3,random_state=1)

# Balancing the dataset using SMOTE technique
X_train, Y_train=SMOTE(random_state=1).fit_resample(X_train,Y_train) # Balancing the class labels

# x2=cancerdata[['N Stage_N1','6th Stage_IIIA','T Stage _T4','T Stage _T3']]
# X_scaled2=StandardScaler().fit_transform(X2)
# X_train,X_test,Y_train,Y_test=train_test_split(X_scaled2,Y,test_size=0.3,random_state=1)
# X_train,Y_train=SMOTE(random_state=1).fit_resample(X_train,Y_train)

# 80,true postive
# 20,false positive
# 60,false negative
# 40,true negative
# 100,
# 100,
# 120
# 80
# 2/3 .6
# 4/5 .8
# .7
# .72
# .85

